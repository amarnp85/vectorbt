---
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: 
alwaysApply: false
---
# Cursor Rules Guidelines

## Rule Structure Requirements

All cursor rules must follow this structure:

```markdown
---
description: Clear, one-line description of what the rule enforces
globs: path/to/files/*.ext, other/path/**/*
alwaysApply: boolean
---

# Rule Title

## Main Sections
- **Key Principles in Bold**
  - Supporting details
  - Specific examples
```

## File References

When referencing files in rules:
- Use `[filename](mdc:path/to/file)` format
- Example: [backtester_core.mdc](mdc:.cursor/rules/backtester_core.mdc) for rule references
- Example: [base.py](mdc:backtester/strategies/base.py) for code references

## Code Examples

Always include practical code examples:

```python
# ✅ DO: Show correct VBT usage
portfolio = vbt.Portfolio.from_signals(
    data.close,
    entries=entries,
    exits=exits,
    **config.to_dict()
)

# ❌ DON'T: Show anti-patterns
# Custom portfolio tracking implementation
```

## Rule Content Guidelines

### Structure
1. **Start with Philosophy**: Core principles and approach
2. **Provide Context**: When and why to apply the rule
3. **Show Examples**: Real code from the project
4. **Include Anti-patterns**: What to avoid
5. **Reference Documentation**: Link to vectorbtpro_docs when relevant

### Best Practices
- Keep rules actionable and specific
- Use actual code examples from the codebase
- Focus on VectorBT Pro best practices
- Minimize custom implementations
- Emphasize the "less is more" philosophy

## Rule Categories

### Core Rules
- **backtester_core.mdc**: Main VectorBT Pro framework rules
- **dev_workflow.mdc**: Development process and patterns
- **self_improve.mdc**: Rule improvement guidelines

### Specialized Rules (create as needed)
- Strategy-specific patterns
- Performance optimization techniques
- Testing methodologies

## Rule Maintenance

### When to Update
- New VectorBT Pro features discovered
- Better patterns identified in codebase
- Performance improvements found
- Common mistakes observed

### Update Process
1. Identify the pattern or anti-pattern
2. Find real examples in the codebase
3. Update the appropriate rule file
4. Ensure consistency across all rules

## Writing Style

### Clarity
- Use clear, concise language
- Avoid jargon unless necessary
- Define technical terms when first used

### Formatting
- Use bullet points for lists
- Bold key concepts
- Use code blocks liberally
- Keep paragraphs short

### Examples
```markdown
### Feature Name
Brief description of the feature and when to use it.

# ✅ DO: Correct approach
actual_working_code_example

# ❌ DON'T: Common mistake
problematic_code_pattern

**Note**: Additional context or VBT documentation reference
```

## Cross-References

### Internal Links
- Link between related rules
- Reference specific sections
- Connect patterns to examples

### External References
- Link to vectorbtpro_docs/
- Reference official VBT documentation
- Include relevant examples/

## Quality Checklist

Before finalizing a rule:
- [ ] Clear, actionable guidance
- [ ] Real code examples included
- [ ] Anti-patterns documented
- [ ] VBT best practices emphasized
- [ ] Consistent with other rules
- [ ] References updated
- [ ] No unnecessary complexity

## Common Pitfalls

1. **Over-documenting**: Keep rules focused and practical
2. **Theoretical examples**: Use real code from the project
3. **Outdated patterns**: Regularly review and update
4. **Missing context**: Explain when and why to apply rules
5. **Ignoring VBT features**: Always check VBT capabilities first

Remember: **Rules should make development faster and more consistent, not slower!**